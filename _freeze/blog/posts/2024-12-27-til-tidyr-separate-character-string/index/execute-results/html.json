{
  "hash": "f02386f56e1f422e3a5f0c7167cc4d8f",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Separate character strings into rows and columns using `tidyr` functions\"\ndescription: \"Need to separate strings? Use the `separate_*` family of functions\"\ndate: \"2024-12-27\"\nauthor: \"Collin K. Berke, Ph.D.\"\ndraft: false\nimage: thumbnail.jpg\ntoc: true\ncode-link: true\ncode-copy: true\nfrom: markdown+emoji\ncategories:\n  - til\n  - tidyr\n  - data wrangling\nformat:\n  html:\n    other-links:\n      - text: \"Chapter 14: Strings R4DS\"\n        href: https://r4ds.hadley.nz/strings#extracting-data-from-strings\n      - text: \"separate_wider_* docs\"\n        href: https://tidyr.tidyverse.org/reference/separate_wider_delim.html\n      - text: \"separate_longer_* docs\"\n        href: https://tidyr.tidyverse.org/reference/separate_longer_delim.html\n      - text: \"tidyr 1.3.0 release notes\"\n        href: \"https://www.tidyverse.org/blog/2023/01/tidyr-1-3-0/\"\n---\n\n\n\n\n![Photo by [Johnny Briggs](https://unsplash.com/photos/blue-and-white-pepsi-can-Fxz3_gc2RR8)](thumbnail-wide.jpg){fig-align=\"center\"}\n\n# Background\n\nTIL, as of [`tidyr` 1.3.0](https://www.tidyverse.org/blog/2023/01/tidyr-1-3-0/), there's a new family of string separation functions:\n\n* `separate_wider_delim()`\n* `separate_wider_position()`\n* `separate_wider_regex()`\n* `separate_longer_delim()`\n* `separate_longer_position()`\n\nThese functions generally do two things:\n\n1. Separate strings into individual rows or columns.\n2. Separate strings by some character delimiter, position, or regular expression.\n\nIf you've used `tidyr` in the past, you're likely familiar with the `separate()` function.\nThis function was useful in cases where character strings needed to be separated into different columns based on a pattern.\nWhile re-reading the 2nd edition of the [R for Data Science](https://r4ds.hadley.nz/) book for the Online Data Science Learning Community (check us out [here](https://dslc.io/)), I was reminded `separate()` was superseded by this family of functions.\nFor myself, I decided writing a post was needed to better understand how to use these functions.\nIn this post I'll describe each function and build on what's discussed in the book by sharing some examples I might use these functions.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n:::\n\n\n\n\n# `separate_longer_delim()`\n\nLet's start with `separate_longer_delim()`.\nThis function takes a character string and turns it into additional rows using a delimiter.\nWe'll need some example data.\n\nI'm a college sports fan, so let's create a dataset containing Big Ten and Big 12 conference teams.\nHere's the code to create some example data:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbig_ten <- str_c(\n  \"Illinois\",\n  \"Indiana\",\n  \"Iowa\",\n  \"Maryland\",\n  \"Michigan\",\n  \"Michigan State\",\n  \"Minnesota\",\n  \"Nebraska\",\n  \"Northwestern\",\n  \"Ohio State\",\n  \"Oregon\",\n  \"Penn State\",\n  \"Purdue\",\n  \"Rutgers\",\n  \"UCLA\",\n  \"USC\",\n  \"Washington\",\n  \"Wisconsin\",\n  sep = \", \"\n)\n\nbig_12 <- str_c(\n  \"Arizona State\",\n  \"Iowa State\",\n  \"BYU\",\n  \"Colorado\",\n  \"Baylor\",\n  \"TCU\",\n  \"Texas Tech\",\n  \"Kansas State\",\n  \"West Virginia\",\n  \"Kansas\",\n  \"Cincinnati\",\n  \"Houston\",\n  \"Utah\",\n  \"Arizona\",\n  \"UCF\",\n  \"Oklahoma State\",\n  sep = \", \"\n)\n\ndata_teams <- tibble(\n  conferene = c(\"Big Ten\", \"Big 12\"),\n  teams = c(big_ten, big_12)\n)\n\ndata_teams\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2 × 2\n  conferene teams                                                                                   \n  <chr>     <chr>                                                                                   \n1 Big Ten   Illinois, Indiana, Iowa, Maryland, Michigan, Michigan State, Minnesota, Nebraska, North…\n2 Big 12    Arizona State, Iowa State, BYU, Colorado, Baylor, TCU, Texas Tech, Kansas State, West V…\n```\n\n\n:::\n:::\n\n\n\n\nIn practice, this dataset isn't really useful: having a list of teams in a character string doesn't afford us any ability to apply other operations to the data.\nIt would be useful if the data were in **long** format, where each team is on its own row, and the conference is repeated.\nIt's also important to recognize each team in the character string are **delimited** by a comma.\nLet's use the `separate_longer_delim()` function to make it more useful.\nHere's what the code looks like:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata_teams |>\n  separate_longer_delim(\n    cols = teams,\n    delim = \", \"\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 34 × 2\n   conferene teams         \n   <chr>     <chr>         \n 1 Big Ten   Illinois      \n 2 Big Ten   Indiana       \n 3 Big Ten   Iowa          \n 4 Big Ten   Maryland      \n 5 Big Ten   Michigan      \n 6 Big Ten   Michigan State\n 7 Big Ten   Minnesota     \n 8 Big Ten   Nebraska      \n 9 Big Ten   Northwestern  \n10 Big Ten   Ohio State    \n# ℹ 24 more rows\n```\n\n\n:::\n:::\n\n\n\n\n# `separate_wider_position()`\n\n`separate_longer_position()` separates character strings into additional rows using a position index, rather than some type of character delimiter.\nThe book mentions the use of `separate_longer_position()` is quite rare.\nIn fact, I struggled thinking of a practical example of where this might be applied.\nAs such, this example is a little contrived.\nHow about days it rained in Lincoln, NE for the months of September and October, 2024?\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrain_sept <- str_c(\n  \"N\", \"N\", \"N\", \"N\", \"N\",\n  \"Y\", \"N\", \"N\", \"N\", \"Y\",\n  \"N\", \"N\", \"N\", \"N\", \"N\",\n  \"N\", \"Y\", \"Y\", \"Y\", \"N\",\n  \"Y\", \"Y\", \"Y\", \"Y\", \"N\",\n  \"N\", \"N\", \"N\", \"N\", \"N\"\n)\n\nrain_oct <- str_c(\n  \"N\", \"N\", \"Y\", \"N\", \"N\",\n  \"N\", \"N\", \"N\", \"N\", \"N\",\n  \"N\", \"N\", \"N\", \"N\", \"N\",\n  \"N\", \"N\", \"N\", \"N\", \"N\",\n  \"Y\", \"N\", \"Y\", \"N\", \"N\",\n  \"N\", \"N\", \"N\", \"N\", \"Y\",\n  \"N\"\n)\n\ndata_lnk_rain <- tibble(\n  year = 2024,\n  month = c(\"September\", \"October\"),\n  rain = c(rain_sept, rain_oct)\n)\n\ndata_lnk_rain\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2 × 3\n   year month     rain                           \n  <dbl> <chr>     <chr>                          \n1  2024 September NNNNNYNNNYNNNNNNYYYNYYYYNNNNNN \n2  2024 October   NNYNNNNNNNNNNNNNNNNNYNYNNNNNNYN\n```\n\n\n:::\n:::\n\n\n\n\nAgain, what if we want **longer** data, where each day's observation gets its own row?\nThe character strings in the `rain` variable don't really have a point of reference where to separate the string.\nThe only point of reference we have is **positionally** using some type of index.\nIn this case, we have a character string of length 1 representing whether precipitation was observed that day: \"Y\" = rain; \"N\" = no rain.\nWhile we're at it, let's also mutate a `day` column for each observation.\nThe following code chunk demonstrates how to do this:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata_lnk_rain |>\n  separate_longer_position(rain, width = 1) |>\n  group_by(year, month) |>\n  mutate(day = 1:n(), .before = rain)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 61 × 4\n# Groups:   year, month [2]\n    year month       day rain \n   <dbl> <chr>     <int> <chr>\n 1  2024 September     1 N    \n 2  2024 September     2 N    \n 3  2024 September     3 N    \n 4  2024 September     4 N    \n 5  2024 September     5 N    \n 6  2024 September     6 Y    \n 7  2024 September     7 N    \n 8  2024 September     8 N    \n 9  2024 September     9 N    \n10  2024 September    10 Y    \n# ℹ 51 more rows\n```\n\n\n:::\n:::\n\n\n\n\n# `separate_wider_delim()`\n\nSeparating strings into columns is a common operation.\nAt times, extra variables are crammed into one variable, where it would be useful if the data was separated into additional variables.\nLet's go back to our college teams example data.\n\nThis data will combine team names with conferences.\nHowever, it's often useful to have a separate variable only containing the conference (i.e., we may want to filter out specific conferences for an analysis).\nAt times, our data will look like this:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata_team_conference <- tibble(\n  team = c(\n    \"Nebraska (Big Ten)\",\n    \"Texas (Big 12)\",\n    \"Pittsburgh (ACC)\",\n    \"Creighton (Big East)\",\n    \"Texas A&M (SEC)\"\n  )\n)\n\ndata_team_conference\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 × 1\n  team                \n  <chr>               \n1 Nebraska (Big Ten)  \n2 Texas (Big 12)      \n3 Pittsburgh (ACC)    \n4 Creighton (Big East)\n5 Texas A&M (SEC)     \n```\n\n\n:::\n:::\n\n\n\n\nWe can now separate this column of character strings into multiple columns using `separate_wider_delim()`.\nIn the end, we want two columns: `team` and `conference`.\nColumn names are passed as a character string of names to the `names` argument.\nThe ` (` character will be used as the delimiter to separate into the two columns, passed to the `delim` argument.\nThe last step is to use `mutate()` and `str_remove()` to remove the extra `)` at the end of the character string.\nHere is the code to perform all these steps:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata_team_conference |>\n  separate_wider_delim(\n    team,\n    delim = \" (\",\n    names = c(\"team\", \"conference\")\n  ) |>\n  mutate(\n    conference = str_remove(conference, \"\\\\)\")\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 × 2\n  team       conference\n  <chr>      <chr>     \n1 Nebraska   Big Ten   \n2 Texas      Big 12    \n3 Pittsburgh ACC       \n4 Creighton  Big East  \n5 Texas A&M  SEC       \n```\n\n\n:::\n:::\n\n\n\n# Too much or Too little data\n\nOne common problem arises when you separate strings, though: sometimes you end up with **too much** or **too little** data.\nMoreover, at times, you need more information to debug problems with the separation step.\n`separate_wider_delim()` provides several arguments when confronted with these issues.\nThese arguments provide additional functionality, including creating additional columns, dropping extra data, merging, or outputting debugging information.\n\nThe `too_few` and `too_many` arguments are available to help in these situations.\nI highlight their utility with a couple of examples to follow.\nHowever, I suggest reading and reviewing the examples in the docs to gain a complete understanding of the utility of these arguments.\n\nTake for example file path parsing. Let's start with some example data.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata_file_paths <- tibble(\n  path = c(\n    \"2024_10_01-1925-f-monthly_users\",\n    \"2024_11_01-1925-f-monthly_users\",\n    \"2024_12_01-1925-f-monthly_users\",\n    \"2024_10_01-1925-m-monthly_users\",\n    \"2024_11_01-1925-m-monthly_users\",\n    \"2024_12_01-1925-m-monthly_users\",\n    \"2024_10_01-2635-f-monthly_users\",\n    \"2024_11_01-2635-f-monthly_users\",\n    \"2024_12_01-2635-f-monthly_users\",\n    \"2024_10_01-2635-m-monthly_users\",\n    \"2024_11_01-2635-m-monthly_users\",\n    \"2024_12_01-2635-m-monthly_users\"\n  )\n)\n\ndata_file_paths\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 12 × 1\n   path                           \n   <chr>                          \n 1 2024_10_01-1925-f-monthly_users\n 2 2024_11_01-1925-f-monthly_users\n 3 2024_12_01-1925-f-monthly_users\n 4 2024_10_01-1925-m-monthly_users\n 5 2024_11_01-1925-m-monthly_users\n 6 2024_12_01-1925-m-monthly_users\n 7 2024_10_01-2635-f-monthly_users\n 8 2024_11_01-2635-f-monthly_users\n 9 2024_12_01-2635-f-monthly_users\n10 2024_10_01-2635-m-monthly_users\n11 2024_11_01-2635-m-monthly_users\n12 2024_12_01-2635-m-monthly_users\n```\n\n\n:::\n:::\n\n\n\n\nColumn separation can be performed either by specifying a delimiter or by position.\nLet's start off by separating by delimiter by using the `separate_wider_delim()` function. We specify the following arguments:\n\n* `data` - The data containing the column(s) we want to separate.\n* `cols` - The column(s) we want to separate.\n* `delim` - The character delimiter we want to use to separate our information into newly mutated columns.\n* `names` - The names of the columns the separated column will be separated into.\n\nIn this example we'll separate `path` into four columns: `date`, `age_grp`, `gender`, and `report`.\nHere's what the code looks like to separate by a character delimiter:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nseparate_wider_delim(\n  data = data_file_paths,\n  cols = path,\n  delim = \"-\",\n  names = c(\"date\", \"age_grp\", \"gender\", \"report\")\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 12 × 4\n   date       age_grp gender report       \n   <chr>      <chr>   <chr>  <chr>        \n 1 2024_10_01 1925    f      monthly_users\n 2 2024_11_01 1925    f      monthly_users\n 3 2024_12_01 1925    f      monthly_users\n 4 2024_10_01 1925    m      monthly_users\n 5 2024_11_01 1925    m      monthly_users\n 6 2024_12_01 1925    m      monthly_users\n 7 2024_10_01 2635    f      monthly_users\n 8 2024_11_01 2635    f      monthly_users\n 9 2024_12_01 2635    f      monthly_users\n10 2024_10_01 2635    m      monthly_users\n11 2024_11_01 2635    m      monthly_users\n12 2024_12_01 2635    m      monthly_users\n```\n\n\n:::\n:::\n\n\n\n\nThe same outcome can be achieved by separating positionally as well.\nHere we just use some index values passed via a semi-named vector to the `widths` argument.\nThe unnamed portions are the empty, unneeded portions of the string we want to separate by.\nThe named numeric values are the character lengths of each piece of information we want to capture into our newly created columns.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nseparate_wider_position(\n  data = data_file_paths,\n  cols = path,\n  widths = c(date = 10, 1, age_grp = 4, 1, gender = 1, 1, report = 13)\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 12 × 4\n   date       age_grp gender report       \n   <chr>      <chr>   <chr>  <chr>        \n 1 2024_10_01 1925    f      monthly_users\n 2 2024_11_01 1925    f      monthly_users\n 3 2024_12_01 1925    f      monthly_users\n 4 2024_10_01 1925    m      monthly_users\n 5 2024_11_01 1925    m      monthly_users\n 6 2024_12_01 1925    m      monthly_users\n 7 2024_10_01 2635    f      monthly_users\n 8 2024_11_01 2635    f      monthly_users\n 9 2024_12_01 2635    f      monthly_users\n10 2024_10_01 2635    m      monthly_users\n11 2024_11_01 2635    m      monthly_users\n12 2024_12_01 2635    m      monthly_users\n```\n\n\n:::\n:::\n\n\n\n\n## `too_many`\n\nSay we have a case where we don't need the end of the path, specifically the `-monthly_users` portion.\nFor example:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nseparate_wider_delim(\n  data = data_file_paths,\n  cols = path,\n  delim = \"-\",\n  names = c(\"date\", \"age_grp\", \"gender\")\n)\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError in `separate_wider_delim()`:\n! Expected 3 pieces in each element of `path`.\n! 12 values were too long.\nℹ Use `too_many = \"debug\"` to diagnose the problem.\nℹ Use `too_many = \"drop\"/\"merge\"` to silence this message.\n```\n\n\n:::\n:::\n\n\n\n\nWe get an error.\nThe error is the result of having more data then there are columns to separate into.\nTo address this, we need to pass different options to the `too_many` argument of the function.\nLet's use `too_many = \"debug\"` to receive additional information on what needs to be fixed.\nAlthough the problem is pretty straightforward here, I wanted to show this option in case you're confronted with a situation with a more complex separation.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nseparate_wider_delim(\n  data = data_file_paths,\n  cols = path,\n  delim = \"-\",\n  names = c(\"date\", \"age_grp\", \"gender\"),\n  too_many = \"debug\"\n)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Debug mode activated: adding variables `path_ok`, `path_pieces`, and `path_remainder`.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 12 × 7\n   date       age_grp gender path                            path_ok path_pieces path_remainder\n   <chr>      <chr>   <chr>  <chr>                           <lgl>         <int> <chr>         \n 1 2024_10_01 1925    f      2024_10_01-1925-f-monthly_users FALSE             4 -monthly_users\n 2 2024_11_01 1925    f      2024_11_01-1925-f-monthly_users FALSE             4 -monthly_users\n 3 2024_12_01 1925    f      2024_12_01-1925-f-monthly_users FALSE             4 -monthly_users\n 4 2024_10_01 1925    m      2024_10_01-1925-m-monthly_users FALSE             4 -monthly_users\n 5 2024_11_01 1925    m      2024_11_01-1925-m-monthly_users FALSE             4 -monthly_users\n 6 2024_12_01 1925    m      2024_12_01-1925-m-monthly_users FALSE             4 -monthly_users\n 7 2024_10_01 2635    f      2024_10_01-2635-f-monthly_users FALSE             4 -monthly_users\n 8 2024_11_01 2635    f      2024_11_01-2635-f-monthly_users FALSE             4 -monthly_users\n 9 2024_12_01 2635    f      2024_12_01-2635-f-monthly_users FALSE             4 -monthly_users\n10 2024_10_01 2635    m      2024_10_01-2635-m-monthly_users FALSE             4 -monthly_users\n11 2024_11_01 2635    m      2024_11_01-2635-m-monthly_users FALSE             4 -monthly_users\n12 2024_12_01 2635    m      2024_12_01-2635-m-monthly_users FALSE             4 -monthly_users\n```\n\n\n:::\n:::\n\n\n\n\nThe `too_many = \"debug\"` outputs a tibble with some additional columns ( `*_ok`, `*_pieces`, `*_remainder`) of information.\nThe `*` being the name of the column to be separated.\nThese columns contain information to help us quickly diagnose the problem.\nUsing our example data, we get the following:\n\nThis column is useful for identifying the presence of any variable length strings.\n\n* `path_ok` provides a boolean to quickly identify cases where the separation failed.\n\n* `path_pieces` represents the number of pieces resulting from separating the string.\n\n* `path_remainder` shows what's left after the separation is performed.\nThis is useful for identifying if there's any additional information you want to retain in additional columns.\n\n::: {.callout-note}\nAlthough not applicable here, a neat trick to quickly identify the columns that didn't separate as we expected is to use the following:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndebug_path |> filter(!x_ok)\n```\n:::\n\n\n\n:::\n\nNow that we have additional information to help us figure out what's going on, we can choose another option for the `too_many` argument to handle our specific case.\nWe have two additional options beyond `error` and `debug`:\n\n* `drop` will drop the additional information that doesn't fit into our newly specified columns.\n* `merge` will keep the additional information, but it will merge it with the data in the final column.\n\nLet's observe both options:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nseparate_wider_delim(\n  data = data_file_paths,\n  cols = path,\n  delim = \"-\",\n  names = c(\"date\", \"age_grp\", \"gender\"),\n  too_many = \"drop\"\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 12 × 3\n   date       age_grp gender\n   <chr>      <chr>   <chr> \n 1 2024_10_01 1925    f     \n 2 2024_11_01 1925    f     \n 3 2024_12_01 1925    f     \n 4 2024_10_01 1925    m     \n 5 2024_11_01 1925    m     \n 6 2024_12_01 1925    m     \n 7 2024_10_01 2635    f     \n 8 2024_11_01 2635    f     \n 9 2024_12_01 2635    f     \n10 2024_10_01 2635    m     \n11 2024_11_01 2635    m     \n12 2024_12_01 2635    m     \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nseparate_wider_delim(\n  data = data_file_paths,\n  cols = path,\n  delim = \"-\",\n  names = c(\"date\", \"age_grp\", \"gender\"),\n  too_many = \"merge\"\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 12 × 3\n   date       age_grp gender         \n   <chr>      <chr>   <chr>          \n 1 2024_10_01 1925    f-monthly_users\n 2 2024_11_01 1925    f-monthly_users\n 3 2024_12_01 1925    f-monthly_users\n 4 2024_10_01 1925    m-monthly_users\n 5 2024_11_01 1925    m-monthly_users\n 6 2024_12_01 1925    m-monthly_users\n 7 2024_10_01 2635    f-monthly_users\n 8 2024_11_01 2635    f-monthly_users\n 9 2024_12_01 2635    f-monthly_users\n10 2024_10_01 2635    m-monthly_users\n11 2024_11_01 2635    m-monthly_users\n12 2024_12_01 2635    m-monthly_users\n```\n\n\n:::\n:::\n\n\n\n\nEither operation is pretty straightforward: drop the additional information or merge what's left in the newly created column.\nNonetheless, it's likely best to debug first.\nKnowing what's going on with your separation before applying a fix can be useful, and it will help you avoid parsing mistakes.\n\n## `too_few`\n\nNext, I want to highlight options for when you have too few data.\nLet's go back to some college sports examples, specifically college basketball game log data.\nSuch data might look like [this](https://www.sports-reference.com/cbb/schools/nebraska/men/2024-gamelogs-advanced.html).\nTake note of the `W/L` column.\nNot only are wins and losses denoted, but the variable may also contain info if the win occurred during an overtime period.\nLet's mimic this structure in some example data.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata_bball_wl <- tibble(\n  game = c(1:6),\n  team = c(\n    \"Nebraska\",\n    \"Nebraska\",\n    \"Nebraska\",\n    \"Nebraska\",\n    \"Nebraska\",\n    \"Nebraska\"\n  ),\n  w_l = c(\n    \"W\",\n    \"W (1 OT)\",\n    \"L\",\n    \"W (3 OT)\",\n    \"L (2 OT)\",\n    \"W\"\n  )\n)\n\ndata_bball_wl\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 3\n   game team     w_l     \n  <int> <chr>    <chr>   \n1     1 Nebraska W       \n2     2 Nebraska W (1 OT)\n3     3 Nebraska L       \n4     4 Nebraska W (3 OT)\n5     5 Nebraska L (2 OT)\n6     6 Nebraska W       \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nseparate_wider_delim(\n  data = data_bball_wl,\n  cols = \"w_l\",\n  delim = \" (\",\n  names = c(\"w_l\", \"ots\")\n)\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError in `separate_wider_delim()`:\n! Expected 2 pieces in each element of `w_l`.\n! 3 values were too short.\nℹ Use `too_few = \"debug\"` to diagnose the problem.\nℹ Use `too_few = \"align_start\"/\"align_end\"` to silence this message.\n```\n\n\n:::\n:::\n\n\n\n\nError, so let's debug what's happening with our separation.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nseparate_wider_delim(\n  data = data_bball_wl,\n  cols = \"w_l\",\n  delim = \" (\",\n  names = c(\"w_l\", \"ots\"),\n  too_few = \"debug\"\n)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Debug mode activated: adding variables `w_l_ok`, `w_l_pieces`, and `w_l_remainder`.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 7\n   game team     w_l      ots   w_l_ok w_l_pieces w_l_remainder\n  <int> <chr>    <chr>    <chr> <lgl>       <int> <chr>        \n1     1 Nebraska W        <NA>  FALSE           1 \"\"           \n2     2 Nebraska W (1 OT) 1 OT) TRUE            2 \"\"           \n3     3 Nebraska L        <NA>  FALSE           1 \"\"           \n4     4 Nebraska W (3 OT) 3 OT) TRUE            2 \"\"           \n5     5 Nebraska L (2 OT) 2 OT) TRUE            2 \"\"           \n6     6 Nebraska W        <NA>  FALSE           1 \"\"           \n```\n\n\n:::\n:::\n\n\n\n\nJust what we thought, rows 1, 3, 5, and 6 don't contain enough information to complete our operation of filling the `ots` variable.\nThe `separate_wider_delim()` function has two options for the `too_many` argument to address this issue:\n\n* `align_end` adds `NA` at the start of short matches to pad to the correct length.\n* `align_start` adds `NA` at the end of the short matches to pad to the correct length.\n\nI'll start with `align_end` first, just to demonstrate what it does, though this operation isn't what we're looking to do here.\nThen, I'll show you `align_start`, the operation needed to complete our separation successfully.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nseparate_wider_delim(\n  data = data_bball_wl,\n  cols = \"w_l\",\n  delim = \" (\",\n  names = c(\"w_l\", \"ot\"),\n  too_few = \"align_end\"\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 4\n   game team     w_l   ot   \n  <int> <chr>    <chr> <chr>\n1     1 Nebraska <NA>  W    \n2     2 Nebraska W     1 OT)\n3     3 Nebraska <NA>  L    \n4     4 Nebraska W     3 OT)\n5     5 Nebraska L     2 OT)\n6     6 Nebraska <NA>  W    \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nseparate_wider_delim(\n  data = data_bball_wl,\n  cols = \"w_l\",\n  delim = \" (\",\n  names = c(\"w_l\", \"ot\"),\n  too_few = \"align_start\"\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 4\n   game team     w_l   ot   \n  <int> <chr>    <chr> <chr>\n1     1 Nebraska W     <NA> \n2     2 Nebraska W     1 OT)\n3     3 Nebraska L     <NA> \n4     4 Nebraska W     3 OT)\n5     5 Nebraska L     2 OT)\n6     6 Nebraska W     <NA> \n```\n\n\n:::\n:::\n\n\n\n\nIn short, all the align selection does is modify where the `NA` will be placed, essentially modifying the padding to create a correct length for the separation to be valid.\n\nGreat, now that we've identified where to separate the columns, we just need to do some additional string manipulation to finish the wrangling of this data.\nBelow are the wrangling steps I applied:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata_bball_wl |>\n  separate_wider_delim(\n    cols = \"w_l\",\n    delim = \" (\",\n    names = c(\"w_l\", \"ot\"),\n    too_few = \"align_start\"\n  ) |>\n  mutate(\n    n_ot = str_remove(ot, \" OT\\\\)\"),\n    ot = ifelse(is.na(ot), FALSE, TRUE),\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 5\n   game team     w_l   ot    n_ot \n  <int> <chr>    <chr> <lgl> <chr>\n1     1 Nebraska W     FALSE <NA> \n2     2 Nebraska W     TRUE  1    \n3     3 Nebraska L     FALSE <NA> \n4     4 Nebraska W     TRUE  3    \n5     5 Nebraska L     TRUE  2    \n6     6 Nebraska W     FALSE <NA> \n```\n\n\n:::\n:::\n\n\n\n\n# `separate_wider_regex()`\n\nIn this last section, we'll cover a slightly more advanced topic: using regular expressions to separate into different columns.\nThe `separate_wider_regex()` performs this operation.\nTo highlight how to do this, let's go back to our file path example data, `data_file_paths`.\n\nSay, for some reason, after we separated the different fields embedded in the file path, we want to separate the data further into year and month columns, dropping the day information, since it's redundant in this case (i.e., these files are always the first of the month).\nHere's the additional code we would need:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata_file_paths |>\n  separate_wider_delim(\n    cols = path,\n    delim = \"-\",\n    names = c(\n      \"date\",\n      \"age_grp\",\n      \"gender\",\n      \"report\"\n    )\n  ) |>\n  separate_wider_regex(\n    cols = date,\n    patterns = c(\n      year = \"\\\\d{4}\",\n      \"_\",\n      month = \"\\\\d{2}\"\n    ),\n    too_few = \"align_start\"\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 12 × 5\n   year  month age_grp gender report       \n   <chr> <chr> <chr>   <chr>  <chr>        \n 1 2024  10    1925    f      monthly_users\n 2 2024  11    1925    f      monthly_users\n 3 2024  12    1925    f      monthly_users\n 4 2024  10    1925    m      monthly_users\n 5 2024  11    1925    m      monthly_users\n 6 2024  12    1925    m      monthly_users\n 7 2024  10    2635    f      monthly_users\n 8 2024  11    2635    f      monthly_users\n 9 2024  12    2635    f      monthly_users\n10 2024  10    2635    m      monthly_users\n11 2024  11    2635    m      monthly_users\n12 2024  12    2635    m      monthly_users\n```\n\n\n:::\n:::\n\n\n\n\nIndeed, it's not lost on me that this operation could be successfully completed using the following approach as well:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata_file_paths |>\n  separate_wider_delim(\n    cols = path,\n    delim = \"-\",\n    names = c(\n      \"date\",\n      \"age_grp\",\n      \"gender\",\n      \"report\"\n    )\n  ) |>\n  separate_wider_delim(\n    cols = date,\n    delim = \"_\",\n    names = c(\"year\", \"month\"),\n    too_many = \"drop\"\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 12 × 5\n   year  month age_grp gender report       \n   <chr> <chr> <chr>   <chr>  <chr>        \n 1 2024  10    1925    f      monthly_users\n 2 2024  11    1925    f      monthly_users\n 3 2024  12    1925    f      monthly_users\n 4 2024  10    1925    m      monthly_users\n 5 2024  11    1925    m      monthly_users\n 6 2024  12    1925    m      monthly_users\n 7 2024  10    2635    f      monthly_users\n 8 2024  11    2635    f      monthly_users\n 9 2024  12    2635    f      monthly_users\n10 2024  10    2635    m      monthly_users\n11 2024  11    2635    m      monthly_users\n12 2024  12    2635    m      monthly_users\n```\n\n\n:::\n:::\n\n\n\n\nHowever, using a regular expression affords a little more accuracy.\nWe're able to specifically specify the pattern we're looking to capture for our column.\n\n# Wrap up\n\nThe takeaway from this TIL post is simple: use `tidyr`'s family of `separate_wider_*` and `separate_longer_*` functions when you need to separate a string into additional columns or rows.\n\nThis post wasn't aiming to be a fully comprehensive guide on how to use this family of functions.\nAs such, I highly suggest reviewing the following to learn more and view additional example use cases:\n\n* [Chapter 14: Strings](https://r4ds.hadley.nz/strings#extracting-data-from-strings) from the [R for Data Science (2e)](https://r4ds.hadley.nz/) book.\n\n* `tidyr`'s [`separate_wider_*`](https://tidyr.tidyverse.org/reference/separate_wider_delim.html) and [`separate_longer_*`](https://tidyr.tidyverse.org/reference/separate_longer_delim.html) function documentation (or run `?separate_wider_delim` / `?separate_longer_delim` in your console).\n\n* `tidyr`'s 1.3.0 [release notes](https://www.tidyverse.org/blog/2023/01/tidyr-1-3-0/).\n\nUntil next time, keep having fun with your data wrangling 📈.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}