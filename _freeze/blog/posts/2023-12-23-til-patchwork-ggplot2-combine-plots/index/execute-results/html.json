{
  "hash": "be4101fd7e1050a128be1f45f7b109ea",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"TIL: Combine plots using `patchwork`\"\ndate: \"2023-12-23\"\nauthor: \"Collin K. Berke, Ph.D.\"\ndraft: false\ndescription: \"Need to add two or more plots together? Use the `patchwork` package\"\ntoc: true\ncategories:\n  - til\n  - data visualization\n---\n\n\n\nToday I learned the [patchwork](https://patchwork.data-imaginist.com/) package makes it easy to combine multiple plots into a single plot. \nIn this post, I overview what I've recently learned from using `patchwork`'s functions to create plot compositions.\n\n# Setup libraries \n\nLet's bring in the libraries we'll need to get started.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(patchwork)\nlibrary(bigrquery)\nlibrary(here)\nlibrary(glue)\n```\n:::\n\n\n\n# Some example plots\n\nBefore demonstrating some uses of the `patchwork` package, we'll need to create some example plots. To do this, I'll use [example ecommerce data](https://developers.google.com/analytics/bigquery/web-ecommerce-demo-dataset) from the [Google Merchandise Store](https://shop.googlemerchandisestore.com/). I've used this data in previous posts, so I'm going to spend little time describing this data in detail. If you're interested in exploring this data further, check out the docs I linked earlier.\n\nIf you want to follow along, you can use the code below. This code queries the `bigquery-public-data.ga4-data.ga4_obfuscated_sample_ecommerce` public data set stored in [BigQuery](https://cloud.google.com/bigquery) using the [`bigrquery` package](https://bigrquery.r-dbi.org/). Know that you'll need to have a Google account to query this data, and depending on your setup (i.e., querying where billing is set up or if you're using Google's free credits), you may be [charged to process your query](https://cloud.google.com/bigquery?hl=en#pricing). \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Query includes additional columns not used in this post\n# but were included for other posts that use this data\nquery_purchases <- \"\nselect \n  event_date,\n  ecommerce.purchase_revenue_in_usd,\n  ecommerce.transaction_id,\n  item_name,\n  item_category,\n  price_in_usd,\n  quantity,\n  item_revenue_in_usd,\n  (select value.string_value from unnest(event_params) where key = 'shipping_tier') as shipping_tier,\n  (select value.string_value from unnest(event_params) where key = 'payment_type') as payment_type,\n  device.category,\n  geo.country,\n  geo.region,\n  geo.city\nfrom `bigquery-public-data.ga4_obfuscated_sample_ecommerce.events_*`,\nunnest(items)\nwhere event_name = 'purchase' and \necommerce.transaction_id != '(not set)' and \n_table_suffix between '20201201' and '20210131'\norder by event_date, ecommerce.transaction_id\n\"\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Make sure to modify with your bq project name\ndata_google_merch <-\n  bq_project_query(\"bigquery-project-name\", query_purchases) |>\n  bq_table_download()\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_csv(\n  data_google_merch,\n  here(\"2023-12-23-blog-patchwork-ggplot2-combine-plots/data_google_merch.csv\")\n)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndata_google_merch <-\n  read_csv(here(\n    \"blog/posts/2023-12-23-til-patchwork-ggplot2-combine-plots/data_google_merch.csv\"\n  )) |>\n  mutate(event_date = ymd(event_date))\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRows: 9365 Columns: 14\n── Column specification ────────────────────────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (8): item_name, item_category, shipping_tier, payment_type, category, country, region, city\ndbl (6): event_date, purchase_revenue_in_usd, transaction_id, price_in_usd, quantity, item_reven...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n\n:::\n:::\n\n\n\nAlthough I'm not going to spend much time describing this data, let's use `dplyr`'s `glimpse()` to get an idea of what variables this data contains.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(data_google_merch)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 9,365\nColumns: 14\n$ event_date              <date> 2020-12-01, 2020-12-01, 2020-12-01, 2020-12-01, 2020-12-01, 2020-…\n$ purchase_revenue_in_usd <dbl> 40, 40, 40, 40, 40, 40, 40, 62, 62, 44, 28, 28, 36, 36, 36, 36, 92…\n$ transaction_id          <dbl> 10648, 10648, 10648, 10648, 10648, 10648, 10648, 171491, 171491, 1…\n$ item_name               <chr> \"Google Hemp Tote\", \"Android SM S/F18 Sticker Sheet\", \"Android Buo…\n$ item_category           <chr> \"Clearance\", \"Accessories\", \"Drinkware\", \"Small Goods\", \"Office\", …\n$ price_in_usd            <dbl> 12, 2, 4, 2, 3, 3, 14, 48, 14, 44, 14, 14, 1, 4, 16, 7, 92, 7, 14,…\n$ quantity                <dbl> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 53, 1, 1, 1, 1,…\n$ item_revenue_in_usd     <dbl> 12, 2, 4, 2, 3, 3, 14, 48, 14, 44, 14, 14, 1, 4, 16, 14, 92, 371, …\n$ shipping_tier           <chr> \"FedEx Ground\", \"FedEx Ground\", \"FedEx Ground\", \"FedEx Ground\", \"F…\n$ payment_type            <chr> \"Pay with credit card\", \"Pay with credit card\", \"Pay with credit c…\n$ category                <chr> \"mobile\", \"mobile\", \"mobile\", \"mobile\", \"mobile\", \"mobile\", \"mobil…\n$ country                 <chr> \"United States\", \"United States\", \"United States\", \"United States\"…\n$ region                  <chr> \"California\", \"California\", \"California\", \"California\", \"Californi…\n$ city                    <chr> \"San Jose\", \"San Jose\", \"San Jose\", \"San Jose\", \"San Jose\", \"San J…\n```\n\n\n:::\n:::\n\n\n\nA note about this data:\n\n* For an unknown reason, I can't figure out why the `purchase_revenue_in_usd` column doesn't equal the sum of `item_revenue_in_usd` aggregated by the `transaction_id` for some transactions.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Check out cases where things don't add up\nnon_equal_trans <- data_google_merch |>\n  group_by(transaction_id) |>\n  summarise(\n    purchase_revenue_in_usd = max(purchase_revenue_in_usd),\n    item_revenue_in_usd = sum(item_revenue_in_usd)\n  ) |>\n  filter(purchase_revenue_in_usd != item_revenue_in_usd) |>\n  mutate(diff = purchase_revenue_in_usd - item_revenue_in_usd) |>\n  arrange(diff)\n\nnon_equal_trans\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 599 × 4\n   transaction_id purchase_revenue_in_usd item_revenue_in_usd  diff\n            <dbl>                   <dbl>               <dbl> <dbl>\n 1         129469                     113                 339  -226\n 2         698935                     159                 318  -159\n 3          43463                     128                 284  -156\n 4         940161                      75                 225  -150\n 5         378505                      88                 176   -88\n 6         145915                      84                 166   -82\n 7          22807                      83                 164   -81\n 8         797936                      79                 156   -77\n 9         594908                     113                 187   -74\n10         589284                      71                 142   -71\n# ℹ 589 more rows\n```\n\n\n:::\n:::\n\n\n\nThe data contains 599 transactions where the revenue doesn't match. One transaction was even over reported by $226. The only conclusion I can come up with is either the merchandise store had some type of sales promotions not included in the analytics data. Nevertheless, I'll create some example plots even though there is known discrepancies.\n\n# Create some example plots\n\nNow that we have some data, let's create some example plots. While you look over the code, note that each plot object is assigned a name. That is, the examples all use the `<-` to create stand alone plot objects. These named objects will be important, as we'll use them with `patchwork`'s operators to create different plot compositions.\n\n## Show me the money\n\nLet's start with a pretty straight forward plot, total revenue over time. Here's the code I used to wrangle the data and create the plot:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata_revenue_trend <- data_google_merch |>\n  group_by(event_date, transaction_id) |>\n  summarise(revenue = max(purchase_revenue_in_usd)) |>\n  summarise(revenue = sum(revenue))\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`summarise()` has grouped output by 'event_date'. You can override using the `.groups` argument.\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nvis_rev_trend <- ggplot(\n  data_revenue_trend,\n  aes(x = event_date, y = revenue)\n) +\n  geom_line(linewidth = 2) +\n  scale_x_date(date_breaks = \"2 week\", date_labels = \"%Y-%m-%d\") +\n  scale_y_continuous(labels = scales::dollar_format()) +\n  theme_minimal() +\n  theme(\n    panel.grid.minor = element_blank(),\n    axis.text.x = element_text(size = 6)\n  ) +\n  labs(x = \"\", y = \"Total Revenue ($USD)\")\n```\n:::\n\n\n\n## Items generating the most revenue \n\nThe data is from an online store, so we should explore items generating the most revenue. To keep things simple, I use `dplyr`'s `slice_max(10)` to create a plot of the Top 10 revenue generating items. Because we're slicing the data, other items are excluded from the plot. The following code wrangles the data and creates the plot for us.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata_items_rev <-\n  data_google_merch |>\n  group_by(item_name) |>\n  summarise(revenue = sum(item_revenue_in_usd)) |>\n  arrange(desc(revenue)) |>\n  slice_max(revenue, n = 10)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nvis_high_rev_items <- ggplot(\n  data_items_rev,\n  aes(\n    x = fct_reorder(item_name, revenue),\n    y = revenue\n  )\n) +\n  geom_col(fill = \"#191970\", alpha = .9) +\n  scale_y_continuous(labels = scales::dollar_format()) +\n  coord_flip() +\n  theme_minimal() +\n  theme(\n    panel.grid.major.y = element_blank(),\n    panel.grid.minor.x = element_blank()\n  ) +\n  labs(y = \"Revenue ($USD)\", x = \"\")\n```\n:::\n\n\n\n## Product categories generating most revenue \n\nThe data also categorizes items into more general groupings. As such, we can create a plot ranking product categories by amount of revenue generated. No question, it's apparel. The code to create the plot is similar to what we did above with items.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata_cat_rev <-\n  data_google_merch |>\n  group_by(item_category) |>\n  summarise(revenue = sum(item_revenue_in_usd)) |>\n  arrange(desc(revenue)) |>\n  slice_max(revenue, n = 10)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nvis_high_cat_items <- ggplot(\n  data_cat_rev,\n  aes(\n    x = fct_reorder(item_category, revenue),\n    y = revenue\n  )\n) +\n  geom_col(fill = \"#191970\", alpha = .9) +\n  scale_y_continuous(labels = scales::dollar_format()) +\n  coord_flip() +\n  theme_minimal() +\n  theme(\n    panel.grid.major.y = element_blank(),\n    panel.grid.minor.x = element_blank()\n  ) +\n  labs(y = \"Revenue ($USD)\", x = \"\")\n```\n:::\n\n\n\n## Product categories trend\n\nNow that we've created a plot ranking product categories, let's create a plot that breaks out several categories of interest over time. To do this, we'll use the following code.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nimportant_cats <-\n  c(\"Accessories\", \"Bags\", \"Apparel\", \"Drinkware\", \"Lifestyle\")\n\ndata_cat_rev_trend <-\n  data_google_merch |>\n  filter(item_category %in% important_cats) |>\n  group_by(event_date, item_category) |>\n  summarise(revenue = sum(item_revenue_in_usd))\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`summarise()` has grouped output by 'event_date'. You can override using the `.groups` argument.\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nvis_high_cat_trend <- ggplot(\n  data_cat_rev_trend,\n  aes(x = event_date, y = revenue, color = item_category)\n) +\n  geom_line(linewidth = 2, alpha = .7) +\n  scale_x_date(date_breaks = \"2 week\", date_labels = \"%Y-%m-%d\") +\n  scale_y_continuous(labels = scales::dollar_format()) +\n  theme_minimal() +\n  theme(\n    panel.grid.minor = element_blank(),\n    axis.text.x = element_text(size = 6)\n  ) +\n  labs(x = \"\", y = \"Revenue ($USD)\", color = \"\")\n```\n:::\n\n\n\n# Basic usage\n\nLet's start out easy by combining two plots. The `+` operator can be used to combine multiple plots into one. \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvis_high_cat_items + vis_high_rev_items\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/vis-top-plots-1.png){width=960}\n:::\n:::\n\n\n\nWe can also use `-` to achieve the same result with `patchwork`. However, this syntax seems confusing at first glance. [`patchwork`'s docs](https://patchwork.data-imaginist.com/articles/guides/assembly.html#nesting-the-left-hand-side) addresses this by suggesting the mental model for the `-` operator should be that of a hyphen and not thought of in terms of traditional subtraction.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvis_high_cat_items - vis_high_rev_items\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/vis-top-plots-sub-1.png){width=960}\n:::\n:::\n\n\n\n## Other operators to know\n\n`patchwork` has other operators to modify the layout of the plot composition. Each operator is listed below with a brief description of its use.\n\n* `+` and `-` - combines plots together on the same level.\n* `|` - combines plots beside each other (i.e., packing).\n* `/` - places plots on top of each other (i.e., stacking).\n* `*` - adds objects like themes and facets to all plots on the current nesting level.\n* `&` - will add objects recursively into nested patches.\n\nThe following examples highlight the use of several of these operators.\n\n# Stacking plots\n\nStacking is just what you'd expect; it's placing plots on top of each other. The `/` operator is used for stacking. Let's stack our two trend lines, `vis_rev_trend` and `vis_high_cat_trend`. Here's what this looks like:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvis_rev_trend / vis_high_cat_trend\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/vis-stack-trend-1.png){width=960}\n:::\n:::\n\n\n\nWe can extend this even further by stacking on another plot.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvis_rev_trend / vis_high_cat_trend / vis_high_rev_items\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/vis-stack-more-plots-1.png){width=960}\n:::\n:::\n\n\n\nEh, I'm not a fan of the result here. The outputted composition has an issue with the y-axis labels. We might want to explore more complex layouts to see if we can fix this problem. But first, let's discuss packing.\n\n# Packing plots\n\nIf you can stack, you can pack. Packing is placing plots next to each other, just like when we used `+` or `-` to combine two plots. `patchwork` makes the `|` operator available for this. Let's pack our bar plots, `vis_high_cat_items` and `vis_high_rev_items`, together.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvis_high_cat_items | vis_high_rev_items\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/vis-pack-plots-1.png){width=960}\n:::\n:::\n\n\n\nPacking and stacking functionality is definitely useful, especially when you need to quickly put two plots together. However, the real power of `patchwork` comes when you combine operators to create more complex layouts.\n\n# Complex layouts\n\nLet's improve the plot where we stacked `vis_rev_trend`, `vis_high_cat_trend`, and `vis_high_rev_items`. We can do this by using `/` and `|` together to create a more complex layout. When combining these operators, we need to manage order precedence (i.e., in what order do we want composition elements to render). Order precedence is maintained by using `()`. Enclosing `vis_rev_trend / vis_high_cat_trend` in parentheses ensures the stacking occurs before the packing.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n(vis_rev_trend / vis_high_cat_trend) | vis_high_rev_items\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/vis-complex-layouts-1.png){width=960}\n:::\n:::\n\n\n\nMuch better. For the heck of it, let's create another plot composition where we put the packed plots on the bottom.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvis_high_cat_trend /\n  (vis_high_cat_items | vis_high_rev_items)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/vis-complex-layouts-2-1.png){width=960}\n:::\n:::\n\n\n\n# Using an inlay\n\n`patchwork`'s `inset_element()` function is useful for creating inlays within a plot. That is, placing a plot within a plot. To do this, we can simply do the following:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvis_rev_trend +\n  inset_element(\n    vis_high_cat_items,\n    left = 0.5,\n    bottom = 0.6,\n    right = 1,\n    top = 1\n  )\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/vis-inlay-1.png){width=960}\n:::\n:::\n\n\n\nThe `inset_element()` function may not be the best application for this specific case, but inlays could be useful in cases where you want to include other useful elements within a plot. This could include things like tables.\n\n# Annotating plot compositions\n\nSeveral methods can be used to annotate plots and plot compositions as a whole. First, we can rely on standard `ggplot2` ways of annotating our plot. We can do this before creating the plot composition with `patchwork`. Once the composition is created, though, each plot will have its own annotation.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvis_rev_trend_annot <- vis_rev_trend +\n  labs(title = \"Total revenue peaks before the holiday season\")\n\nvis_high_cat_trend_annot <- vis_high_cat_trend +\n  labs(title = \"Apparel performs well during this time of the year\")\n\nvis_rev_trend_annot / vis_high_cat_trend_annot\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/vis-rev-trend-annotated-1.png){width=672}\n:::\n:::\n\n\n\nThis works. However, sometimes we need to annotate the composition as one collective visualization. `patchwork`'s `plot_annotation()` function adds annotations to the overall plot composition. \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvis_rev_trend_annot /\n  vis_high_cat_trend_annot +\n  plot_annotation(\n    title = \"Apparel drives Google Merchandise store holiday sales\",\n    subtitle = \"On one single day, apparel revenue peaked ~$4,600 (USD)\",\n    caption = glue(\"Source: Google Analytics | Last updated: {Sys.Date()}\")\n  )\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/vis-rev-trend-comp-annotated-1.png){width=672}\n:::\n:::\n\n\n\nNow we have a title, subtitle, and caption applied to the whole composition. There's a problem, though. Since the composition is combining two plots together, it makes the text of the individual plots too small to read. We can fix this by using `patchworks`'s `&` operator and the `theme()` function. By using this operator and function, we can modify the `size` and `face` style for all the text in the composition.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvis_rev_trend_annot /\n  vis_high_cat_trend_annot +\n  plot_annotation(\n    title = \"Apparel drives Google Merchandise store holiday sales\",\n    subtitle = \"On one single day, apparel revenue peaked ~$4,600 (USD)\",\n    caption = glue(\"Source: Google Analytics | Last updated: {Sys.Date()}\")\n  ) &\n  theme(title = element_text(size = 14))\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: annotation$theme is not a valid theme.\nPlease use `theme()` to construct themes.\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/vis-rev-trend-larger-text-1.png){width=960}\n:::\n:::\n\n\n\nAlthough this formatting made the text easier to read overall, the text hierarchy is  now off. I really want to create some separation between the title of the composition and the individual plot titles. To target format changes to just the composition's title and subtitle, we need to pass a `theme()` specification to the `theme` argument within `plot_annotation()`.  Here's what this looks like:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvis_rev_trend_annot /\n  vis_high_cat_trend_annot +\n  plot_annotation(\n    title = \"Apparel sales drive Google Merchandise store holiday revenue\",\n    subtitle = \"Revenue from this category peaked ~$4,600 (USD) for a single day\",\n    caption = glue(\"Source: Google Analytics | Last updated: {Sys.Date()}\"),\n    theme = theme(\n      plot.title = element_text(size = 20, face = \"bold\"),\n      plot.subtitle = element_text(size = 18)\n    )\n  ) &\n  theme(title = element_text(size = 14))\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: annotation$theme is not a valid theme.\nPlease use `theme()` to construct themes.\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/vis-rev-trend-text-hierarchy-1.png){width=960}\n:::\n:::\n\n\n\nAt this point, this plot composition is looking pretty good. It is a little visually busy, so I would avoid modifying or adding any additional elements. Overall, the `patchwork` package makes combining two or more plots together pretty easy, while also providing additional functionality for common tasks needed to create a plot composition.\n\n# Wrap-up\n\nSo there you have it, an overview of what I recently learned by using the [`patchwork`](https://patchwork.data-imaginist.com/index.html) package to create plot compositions. At the beginning of this post, I created example plots using [obfuscated Google Analytics data](https://developers.google.com/analytics/bigquery/web-ecommerce-demo-dataset) for the [Google Analytics Merchandise store](https://shop.googlemerchandisestore.com/). Using these example plots, I overviewed the basic functionality of different `patchwork` operators to create several examples of plot compositions. I then demonstrated how to create complex layouts by packing and stacking plots. I also briefly discussed inlays. Finally, I covered how you can apply annotations and formatting within a plot composition.\n\nThe `patchwork` package has some additional functionality I didn't cover in this post, so I highly suggest checking out the [package's documentation](https://patchwork.data-imaginist.com/index.html). I've found it to be very useful in many cases.\n\nHappy plotting! \n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}