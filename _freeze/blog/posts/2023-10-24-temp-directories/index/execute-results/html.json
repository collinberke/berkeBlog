{
  "hash": "c2b0dcb2c73cef98ca04ec7a714b8fad",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Using `base::tempdir()` for temporary data storage\"\ndate: \"2023-11-03\"\nauthor: \"Collin K. Berke, Ph.D.\"\ndraft: false \nimage: thumbnail.jpg\ndescription: \"Need to store data in a place that's not persistent, use a temporary directory\"\ntoc: true\ncategories:\n  - data wrangling \n  - workflow\n  - productivity\n---\n\n\n\n\n![Photo by [Jesse Orrico](https://unsplash.com/photos/gray-metal-drawers-h6xNSDlgciU)](thumbnail-wide.jpg)\n\nToday I learned how to store data in R's per-session temporary directory.\n\nRecently, I've been working on an [R package](https://r-pkgs.org/) for a project. This package contains some internal data, which is intended to be updated from time-to-time. As part of the data update process, I'm required to download a set of `.zip` files from cloud storage, unzip, wrangle, and make the data available in the package via the `data` folder.\n\nGiven the data I'm working with, I wanted to avoid storing pre-wrangled data in the `data-raw` directory of the package. My main concern was an accidental check-in of pre-proccessed data into version control. So, I sought out a means to solve this problem.\n\nThis post aims to overview an approach using R's per-session temporary directory to store data temporarily. Specifically, this post will discuss the use of `base::tempdir()` and other system file management functions made available in R to store data in this directory.\n\n::: {.callout-warning}\nUsing R's per-session temporary directory may not be the right solution for your specific situation. If you're working with sensitive data, make sure you follow your organization's guidelines on where to store, access, and properly use your data. \n\nI am not a security expert.\n:::\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n── Attaching core tidyverse packages ──────────────────────────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.1     ✔ stringr   1.5.2\n✔ ggplot2   4.0.0     ✔ tibble    3.3.0\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.1.0     \n── Conflicts ────────────────────────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n\n\n:::\n:::\n\n\n\n\n# What are temporary directories?\n\n::: {.callout-note}\nAs of this writing, I drafted this post on a computer running a Mac operating system. Some of what gets discussed here may not apply to Windows or Linux systems. The ideas and application should be similar, though I haven't fully explored the differences.\n:::\n\nThe temporary directory, simply, is a location on your system. You can store files in this location just like any other directory. The difference is data stored within a temporary directory are not meant to be persistent, and your system will delete them automatically. File deletion either occurs when the system is shut down or after a set amount of time.\n\nIf you're working on a Mac operating system, you can get the path to the temporary directory by running the following in your terminal:\n\n```bash\necho $TMPDIR\n```\n\nWhen I last ran this command on my system, `echo` returned the following path (later we'll use `base::tempdir()` to get and use this path in R).\n\n```txt\n/var/folders/_4/t3mpnn5n5rzg4sdq2fr_n4y80000gn/T/\n```\n\nThis directory is located at the system level. The `cd` command can be used to navigate to it from the terminal. You may have to back up a few directories if your root starts at the user level, though. This is pretty standard, especially if you're working on a Mac. \n\n::: {.callout-note}\nSince I'm drafting this post on my personal machine, I'm not aware if you need admin privileges to access this folder. As such, you may run into issues if you're not an admin on your machine.\n:::\n\nWith my curiosity peaked, I sought more information about what this directory was used for on a MacOS. Oddly enough, there is very little about this directory online. From what I can deduce, the `/var` directory is mainly a per-user cache for temporary files, and it provides security benefits beyond other cache locations on a Mac system (again, I'm not a security expert, so my previous statement may be inaccurate). Being that this location is temporary, this cache gets cleared every time the system restarts or every three days. \n\nAlthough there's a lack of information about this directory online, I did come across a few blog posts and a Stack Overflow answer that were helpful in understanding this temporary directory in more depth: [post 1](https://magnusviri.com/what-is-var-folders.html#:~:text=%22%2Fvar%2Ffolders%22%20(,%2C%20which%20are%20both%20rwxrwxrwt).); [post 2](https://apple.stackexchange.com/questions/22694/private-tmp-vs-private-var-tmp-vs-tmpdir); [post 3](https://macpaw.com/how-to/access-var-folder-mac). You might find these useful if you want to learn more. However, for me, the above is as far as I wanted to go to understand its purpose.\n\n# Access the temporary directory using `base::tempdir()`\n\nAt the start of every session, [R creates a temporary per-session directory, and it removes this temporary directory when the session ends.](https://stackoverflow.com/a/13567465). This temporary directory is stored in the system's temporary directory location (e.g., `/var/folders/_4/t3mpnn5n5rzg4sdq2fr_n4y80000gn/T/`). R also provides [several functions](http://rstat.consulting/blog/temporary-dir-and-files-in-r/) to work with the temporary directory, create, and interact with files within it. \n\n`base::tempdir()` can be used to print the file path of the temporary directory on your system. Let's run it and take a look at what happens.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntempdir()\n```\n:::\n\n\n\n\nOutputted to the terminal is the path to the R session's temporary directory. When I ran it, the returned path looked like this:\n\n```txt\n/var/folders/_4/t3mpnn5n5rzg4sdq2fr_n4y80000gn/T//RtmpaYxspA\n```\n\nThe temporary directory R uses for the current session is labeled using the `RtmpXXXXXX` pattern. The final six characters of the path (i.e., the Xs) are determined by the system. Note, `tempdir()` doesn't create this directory, it just prints the temporary directory's path to the console. This directory is created every time a R session begins. \n\nSince the temporary directory is just like any location on your computer, you can navigate to it from your terminal during an active R session. With your terminal pointing to the temporary directory, you can use the following code to find R's per-session temporary directory:\n\n```bash\nla | grep \"Rtmp\"\n```\n\nLet's take a peak at what's in this directory. R's `list.files()` function can be helpful in this case. \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlist.files(tempdir())\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\ncharacter(0)\n```\n\n\n:::\n:::\n\n\n\n\nMost R setups should start with an empty per-session directory. So the above should return `character(0)`. Despite being empty now, `list.files()` will become handy again once we start to write files to this location. \n\n# Writing files to the temporary directory\n\nNow that we know a little more about this temp directory and where it is located on our system, let's write some data to it. We can do this by doing something like the following.  \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_csv(mtcars, file = paste0(tempdir(), \"/mtcars.csv\"))\n```\n:::\n\n\n\n\nNow when we list the files in the temporary directory (e.g., `list.files(tempdir())`), you should see the `mtcars.csv` file. \n\nIf you're looking to create files with unique names, you can pass the `tempfile()` function to the `file` argument. This looks something like this:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_csv(\n  mtcars, \n  file = tempfile(pattern = \"mtcars\", fileext = \".csv\")\n)\n```\n:::\n\n\n\n\n`tempfile()` creates unique file names, which concatenates together the file path, the character vector passed to the `pattern` argument, a random string in hex, and the character vector inputed to the `fileext` argument. When you list the files in the temporary directory now, you'll see the initial `mtcars.csv` file along with a file that looks something like this: `mtcars7eb3503ac74c.csv`. The random hex string ensures files remain unique.\n\nIndeed, the above is just one way to write files to the temporary directory. You can use other methods to read and write files at this location. However, you now know what is needed to interact with this directory, read and write files to and from it. At this point you can do any data wrangling steps your project requires. After which, we can go about deleting our files from this directory.\n\n# Deleting files with `file.remove()`\n\nAlthough these files will eventually be removed by the system, we should be proactive and clean up after ourselves. \n\n::: {.callout-note}\nIf you're using this approach within functions, especially if their intended to be used by other users, you'll want to be clear they will write data to and remove data from the user's system. \n\nIndeed, it's considered poor practice to change the R landscape on a user's computer without good reason. So the least we can do here is clean up after ourselves.\n:::\n\nTo delete our files we wrote to the temporary directory, run the following in the console:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfile.remove(list.files(tempdir(), full.names = TRUE, pattern = \".csv\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] TRUE TRUE\n```\n\n\n:::\n:::\n\n\n\n\nThe arguments of the `list.files()` function should be pretty straightforward. We want file paths to be full length (i.e., `full.names = TRUE`) and to list only files with the `.csv` extension (i.e., `pattern = \".csv\"`). Then, we use these full file paths within the `file.remove()` function, which will remove the files from R's temporary directory. \n\n# Wrap-up\n\nToday I learned more about R's per-session temporary directory, and how it can be used to write files not intended for persistent storage. I also learned how to use several base R functions to create files within this temporary directory by using `tempfile()` and `tempdir()`. I also demonstrated how the `list.files()` function can be used to list files within any directory on your system, specifically using it to list files in R's temporary directory. Finally, I highlighted how files in the temporary directory can be deleted using the `file.remove()` function. \n\nHave fun using R's per-session temporary directory. Cheers 🎉!\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}