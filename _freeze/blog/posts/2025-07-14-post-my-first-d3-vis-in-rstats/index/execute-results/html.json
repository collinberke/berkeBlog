{
  "hash": "c7807afdf8d71fdc0925848341f876bd",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"\"\ndescription: \"\"\ndate: \"2025-07-14\"\nauthor: \"Collin K. Berke, Ph.D.\"\ndraft: true\nimage: thumbnail.jpg\ntoc: true\ncode-link: true\ncode-copy: true\nfrom: markdown+emoji\ncategories:\n  - javascript\n  - d3\n  - data vis\n---\n\n\n\n# Motivation\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n── Attaching core tidyverse packages ──────────────────────────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.2     ✔ tibble    3.3.0\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.1.0     \n── Conflicts ────────────────────────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n\n\n:::\n:::\n\n\n\n# What is D3.js?\n\n[D3.js](https://d3js.org/) is a [JavaScript](https://en.wikipedia.org/wiki/JavaScript) library for creating bespoke data visulaztions for the web.\nIt provides several methods to manipulate a web page's html elements (i.e., the DOM) and CCS styles to render visualization's, in the form of an SVG, via a web browser.\nUnlike ggplot2, which provides a straight forward, compact syntax to create data visulizations, D3 code is a little more verbose.\nDespite the amount of code needed to create a visualization, the [results](https://observablehq.com/@d3/gallery) from using D3 can be quite striking.\n\n# Creating a simple bar chart\n\nThe goal of this post is to document what I've learned thus far working with D3 and R.\nDisclaimer: I'm very new to using D3.\nWhat you see here may not be best practice or most up to date way of doing things.\nMuch of what you'll find here is someone trying to \"just get it to work\".\n\nTo get up and running quickly, let's create something simple: a horizontal bar chart.\nSpecifically, let's create a bar chart of obfuscated web analytics data from the [Google Merchandise store]().\nThis data is collected from a tool called [Google Analytics](), which is a web site measurement platform.\nThis data is pushed to a cloud service called BigQuery, and it can be queried using SQL.\nGoogle makes this example dataset available for experimentation, and to highlight BigQuery's set of features for people using Google Analytics.\nFor the sake of time, I'm not going to spend much time detailing the nuances of what this data is or how to access it.\nHowever, check out these resource [here]() and [here]() if you want to learn more.\n\nIn short, the data used in the example below is a one month sum of purchases for specific item categories.\nI've included the SQL statement I used to return this data from BigQuery, just in case you're interested in running it yourself.\nAn equivalent to extracting this data from BigQuery if available using the following tibble.\n\n```sql\n\n```\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# fmt: skip\ndata_purchase_cat <- tribble(\n  ~item_category, ~count,\n  \"Apparel\"     ,       1964,\n  \"Campus Collection\",   719,\n  \"New\",                 690,\n  \"Accessories\",         528,\n  \"Shop by Brand\",       434,\n  \"Office\",              362,\n  \"Bags\",                353,\n  \"Drinkware\",           317,\n  \"Clearance\",           311,\n  \"Lifestyle\",           233\n)\n```\n:::\n\n\n\n# Setup the environment to create D3 visualizations\n\nSince D3 uses HTML, CSS, and JavaScript to render your visualizations, to view your visualization you'll need a web browser (e.g., Google Chrome).\nYou certainly could write the HTML, CSS, and JS to output a visualization without the use of R for this example, but my intent is to leverage the functionality of R (i.e., data transformation, Shiny, and Quarto documents) with D3.\n\nI first searched for R packages that made setting up this environment easy.\nThe [{r2d3}](https://rstudio.github.io/r2d3/) package was useful at the start.\nIndeed, the package got me pretty far when working with simple data, like single arrays.\n\nHowever, I was confronted with blocker when trying when trying to import and visualize more complex data structures, like a two column tibble.\nWhen importing this data into the JavaScript environment, I kept getting an `[object, Object]` when running `console.log(dataset)`.\nThis stumped me for awhile, and I couldn't figure out what I was doing wrong.\nSo, I decided to pivot.\n\n:::{.callout-notes}\n{r2d3} certainly was useful for simple D3 data visualizations.\nIt got me up and running quickly.\nHowever, while I was stuck, some additional research resulted in me identifying that {r2d3} hadn't had a recent commit for some time: four years as of the writing of this post.\nAs such, I became concerned my blocker was due to an issue with the repo not being maintained, rather than something I was doing wrong.\n:::\n\n## Wrapping code in an HTML widget\n\nI needed a solution.\nThe [{htmlwidgets}](https://www.htmlwidgets.org/index.html) package seemed useful.\nThis package helps wrap JavaScript code within an R function, and it provides several helper functions to import and transform the data to be used by JavaScript.\n\nWhen creating an htmlwidget, some scaffolding needs to be setup.\nThe official docs [here](https://www.htmlwidgets.org/index.html) give a comprehensive overview of how to set this up, but I'll spend a moment highlighting some steps to get you started.\n\n{htmlwidgets} leverages some R package development conventions, including placing function files in the `R/` directory, and placing all dependency code in the `inst/` directory.\nIn fact, it's useful to place your widgets into a separate package.\n\nTo get yourself started, checkout the scaffolding section of the [{htmlwidgets} docs](https://www.htmlwidgets.org/develop_intro.html#:~:text=%22devtools%22)-,Scaffolding,-To%20create%20a).\nIn short, this section has you run the following in your console to set everything up for your widget:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create the package, complete regular package creation tasks as needed\ndevtools::create(\"d3BarExample\")\nhtmlwidgets::scaffoldWidget(\"d3BarExample\")\ndevtools::document()\ndevtools::install()\n```\n:::\n\n\n\nOnce you run, `htmlwidgets::scaffoldWidget()`, your IDE will automatically open the files you need to edit for your widget.\nIn the end, besides setting up the files for your dependencies, you'll end up mostly editing three files:\n\n* `plot_d3_bar.R` file\n* `plot_d3_bar.js` file\n* `plot_d3_bar.yaml` file\n\n::: {.callout-note}\nObviously, you'll change the names to whatever widget you're creating.\nIn my case, I'm plotting a bar chart, so hence the name `plot_d3_bar.R`\n:::\n\n### Set up D3.js as a dependency\n\nGiven that I'm looking to use D3.js for this widget, it needs to be setup as a dependency.\nThis involves a couple steps.\nFirst, since my intent is to use D3 offline and locally, I'll need to include D3 as a UMD bundle.\nI obtained the most recent version of D3 from the [docs](https://d3js.org/getting-started#d3-in-vanilla-html), which I opted to use the minified version, i.e., `d3.v7.min.js`.\nThis file then gets moved to the `inst/htmlwidgets/libs/d3-7.9.0/` directory.\n\n::: {.callout-note}\nIndeed, being new to JavaScript, I'm unaware about how you can obtain older versions of the D3 UMD.\nI'm sure there's a method to do this.\nI just don't know how.\nIf you know how, please send me a message and I'll update this section.\n:::\n\nOnce the dependency is setup, we need to modify some of the htmlwidget's boiler plate.\nThis includes modifying the dependency `d3BarExample.yaml` file, in the `inst/htmlwidgets/` directory.\nEdit the file to look something like this::\n\n``` yaml\ndependencies:\n - name: d3\n   version: 7.9.0\n   src: \"htmlwidgets/lib/d3-7.9.0\"\n   script: d3.v7.min.js\n   stylesheet: style_plot-d3-scatterplot.css\n```\n\nThis file creates a link between our widget and the JavaScript and CSS files required to render it.\n\nAt this point, we can move to editing our R file, `R/d3BarExample.R`.\nThis function is the bridge between R and JavaScript, so for this example we'll mainly use it to pass data between the two languages.\nDespite this simple functionality, this function can be used to pass additional parameters to JavaScript as well.\n\n### Pass data from R to JavaScript\n\nTake a second to review the scaffolding that's set up for us in the R file as the result of running `htmlwidgets::scaffoldWidget(\"d3BarExample\")`:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nd3BarExample <- function(\n  message,\n  width = NULL,\n  height = NULL,\n  elementId = NULL\n) {\n  # forward options using x\n  x = list(\n    message = message\n  )\n\n  # create widget\n  htmlwidgets::createWidget(\n    name = 'd3BarExample',\n    x,\n    width = width,\n    height = height,\n    package = 'd3BarExample',\n    elementId = elementId\n  )\n}\n```\n:::\n\n\n\nThere's two important bits here: the `x` list object defined inside the scope of the function and the call of the `htmlwidgets::createWidget()` function.\nThe list object will hold the data--and in other cases additional parameters--to be passed along to JavaScript.\n\nIt's likely we'll want to pass R data.frames to D3.\nHowever, D3.js expects data to be formatted in terms of JavaScript arrays.\nWe'll have to transform our data to now work with D3.\n\nNow, take a moment to review the `inst/d3BarExample.js` code.\nThe portion of this code to key in on is the `renderValue` portion.\n\n```js\nHTMLWidgets.widget({\n\n  name: 'd3BarExample',\n\n  type: 'output',\n\n  factory: function(el, width, height) {\n\n    return {\n\n      renderValue: function(x) {\n\n        el.innerText = x.message;\n\n      },\n\n      resize: function(width, height) {\n\n      }\n\n    };\n  }\n});\n```\n\nNotice something?\nPerhaps the `x.message` seems familar.\nIndeed, this is similar to what's available in our R code:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx = list(\n  message = message\n)\n```\n:::\n\n\n\nThis is where the handoff takes place, where the data is passed from R to JavaScript.\nDespite the handoff, there stills needs to be a transformation of a data.frame into an object useable by the JavaScript code.\nAs such, the {htmlwidgets} package provides [several data transformation JavaScript methods](https://www.htmlwidgets.org/develop_advanced.html#data-transformation) to assist us with this.\n\nThis example, given the data being passed along, utilizes the `HTMLWidgets.dataframeToD3()` method.\nThe  `renderValue` portion of our `d3ExampleBar.js` file now looks like this:\n\n```js\nrenderValue: function(x) {\n    var data = HTMLWidgets.dataframeToD3(x.data)\n    console.log(data)\n},\n```\n\nTo confirm the data is as expected, I inserted a call to `console.log(data)` in the code.\nThis prints the data in the browser's developer console.\n\n::: {.callout-note}\nGet comfortable with using  `console.log()` in your code, you're going to use it a lot if you intend to learn and use D3.\nOr, at least I did.\nYou'll also want to become familar with your browser's developer tools.\nHere's a tip, the F12 key quickly opens the inspect tool in Google Chrome.\n:::\n\nThis is done to confirm the data handoff and transformation is working as expected.\n\nAt this point, the next step is to write our D3 JavaScript code to create our visualization.\n\n# Write code for D3 visualization\n\nOne blog post will not be enough to cover all the features and functionality D3 provides.\nIn fact, many books do a more through treatment of the subject (I used this one [here]() on my learning path).\nSo, what's here will be an abbreviated version to get us started with a simple bar chart.\n\nThe JavaScript code for our visualization will be written in the `inst/htmlwidgets/d3BarExample.js` file.\nSpecifically, we'll be writing code in the `renderValue` portion of the file.\n\nFrom the top, we'll start by specifying some variables we'll use later in our code.\nThis portion of the code will look like this:\n\n## Setting constants, logging\n\n```js\n// Setup\nconst svgHeight = 700\nconst svgWidth = 700\nconst svgPadding = 100\nconst data = HTMLWidgets.dataframeToD3.(x.data)\n\n// Print data to console, not needed when finished\nconsole.log(data)\nconsole.log(data.map(d => d.item_category))\nconsole.log(data.map(d => d.count))\n```\n\n::: {.callout-note}\nIf you learn D3 utilizing more dated material, you'll notice there's several methods to declare variables in JavaScript.\nYou'll likely come across the use of `var` in these materials.\nHowever, if you review newer examples, you'll notice the use \n\nAs of [ES6](https://www.w3schools.com/js/js_es6.asp) (the JavaScript version released in 2015 for the unintiated), two newer methods were introduced: `const` and `let`.\n\nWith all this said, use `const` not `var` to declare variables.\nIf you're interested in knowing the differences on the use of `var`,  `const`, and `let`, you might find this [article]() helpful.\n:::\n\nThe first two variables are constants responsible for setting the pixel size of our SVG element within the DOM: `svgHeight` and `svgWidth`.\nThe `svgPadding` is used to establish padding for the SVG element.\nThe last variable is the result of our data transformation step, which utilizes the `HTMLWidgets` `dataframeToD3` method.\nThis step will modify our R data.frame to an array of objects for JavaScript.\n\nFollowing is some logging with `console.log()`.\nI'm using the following code to view that the data transformation step was completed as expected.\nAll it really does is prints values to the JavaScript console in the browser.\nIt's used to confirm that the data transformation step took place and the result was as expected.\n\nDespite the result being simple, let's break down a portion of this code that will show up again as a common pattern in D3 code: `data.map(d => d.item_category)`.\nThis includes:\n\n* `data.map()` which takes our data, an array of objects, and chains it to a method called `map`.\nThis method creates a new array populated with the return values of a called function (i.e., it's a similar operation provided by the `purrr::map()` functions).\n\n* The `d => d.item_category` is our function definitions, where we pass the parameter `d` (i.e., shorthand for data) to our subsetting expression.\nIn more accessible language, this code subsets each item category string from the array.\nThe `=>`, or [arrow function expression](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions), is a compact way of defining an anonymous function in JavaScript.\nThe equivalent would be `function(d) { return d.item_category }`, which is how older texts on D3 would express this statement.\n\n## Create the scale functions\n\nThe next portion of our code looks like the following:\n\n```js\n// Define the scales\nconst yScale = d3.scaleBand()\n    .domain(data.map(d => d.item_category))\n    .range([svgPadding, svgHeight - svgPadding])\n    .padding(0.1);\n\nconst xScale = d3.scaleLinear()\n    .domain([0, d3.max(data, d => d.count)])\n    .range([svgPadding, svgWidth - svgPadding]);\n```\n\nWhat are scales?\nPer [Mike Bostock](), the creator of D3:\n\n> \"Scales are functions that map from an input domain to an output range.\"\n\nTo put it another way, it's a function that transforms our data as represented in the data space (i.e., the data's values) to data represented in the visual space (i.e., pixels).\nEven more simply: transforming a data representation to a pixel representation.\nKeep in mind, scales are different from axes.\nAlthough related, they are different.\nAxes are visual elements, scales are not.\n\nD3 provides [many different scale functions](https://d3js.org/d3-scale).\nIn this example, we are plotting two variables: an ordinal variable (e.g., 'Apparel', 'Campus Collection', 'New') and an interval variable (e.g., 1964, 719, 690).\nAs such, we'll utilize the `d3.scaleBand()` and `d3.scaleLinear()` functions methods to create our scales.\n\nEach scale function will include a `.doman()` and `.range()` method, which will transform our input values to the values utilized in the visual space.\nAs for our ordinal variable, `item_category`, we have to translate text categories into numerical values to be used for the HTML elements.\nSo, we start with our domain, each category, which is the result of our previously discussed `data.map(d => d.item_category)` operation.\nThen we translate into the visual spaces range using `.range([svgPadding, svgHeight - svgPadding])`, which is equivalent to `[100, 600]`.\nPut another way, we're defining a scale to transform our ten categories to evenly be spread on the y-axis within the pixel range of 100 and 600.\n\nThe final method in the chain, the [`.padding(0.1)`](https://d3js.org/d3-scale/band#band_padding) convenience method, adds a little padding, both the inner and outer portions, between each bar.\n\nThe `xScale` is very similiar, but it has some slight differences.\nIn fact, you can just copy and paste your previous `yScale` code to get you started.\nThe first, obvious difference is we're utilizing a different method: d3.scaleLinear(), which maps continuous values to a continuous output range.\nIn other words, it's useful for translating numeric variables, like the `count` variable in our dataset.\n\nAgain, we define both the input domain and the output range.\n\n\n\n# Was it worth learning D3.js?\n\nHere's a diagram visualizing my learning path to get up and running with D3.js.\n\nIn some respects, yes.\nIn others, no.\nIn fact, I wouldn't say I've learned everything I need to know to fully leverage D3's functionality.\nIf you're simply looking to create straightforward visualizations and have no need for the interactive elements provided by D3, then use another library.\nBut, if you're interested in incorporating some more interactivity or animations within your visualizations, then perhaps you'll enjoy learning about D3.js.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}