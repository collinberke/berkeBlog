{
  "hash": "a6d8d0b23ef43f8af0b49eab75d144d9",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Summarize logical vectors to calculate numeric summaries\"\ndate: \"2024-12-08\"\nauthor: \"Collin K. Berke, Ph.D.\"\ndraft: false\nimage: thumbnail.jpg\ndescription: \"Need proportion and count summaries from a logical vector? Use `mean()` and `sum()`\"\ntoc: true\ncategories:\n  - til\n  - data wrangling\n  - logical vectors\n  - summary statistics\n---\n\n\n\n\n![Photo by [Ovidiu Creanga](https://unsplash.com/photos/close-up-photography-brown-wooden-furniture-vfpS6MPv8t0)](thumbnail-wide.jpg){fig-align=\"center\"}\n\n# Background \n\nToday I relearned you can easily calculate counts and proportions with a logical vector (e.g., `c(TRUE, FALSE, FALSE, TRUE)`) in [R](https://www.r-project.org/).\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(ids)\n```\n:::\n\n\n\n\nI've been re-reading the second edition of R for Data Science for a Data Science Learning Community bookclub ([check us out](https://www.dslc.io)). While reading [Chapter 12: Logical vectors](https://r4ds.hadley.nz/logicals#sec-numeric-summaries-of-logicals), I was reminded counts and proportions can be calculated from a logical vector.\n\nI wanted to share what I learned out loud, so others have another example. I also hope writing this post helps me remember it in the future.\n\n# Summaries from logical vectors\n\nThe concept is simple:\n\n> `sum()` gives the number of TRUEs and `mean()` gives the proportion of TRUEs (because `mean()` is just `sum()` divided by `length()`)\n\nThis works because `TRUE` = 1 and `FALSE` = 0 in the R programming language.\n\nLet's look at an example of this in action. We start by creating an example dataset, which builds on the example used in the book:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata_user_engagement <- data.frame(\n  date = sort(rep(seq(as_date(\"2024-12-02\"), as_date(\"2024-12-08\"), by = 1), times = 100)),\n  user_id = rep(random_id(bytes = 4, n = 100), times = 7),\n  time_engaged_sec = sample(c(1:100), 700, replace = TRUE)\n) |>\ntibble()\n```\n:::\n\n\n\n\nThis dataset is loosely based on the domain I work in: digital analytics. It's modeled after event-based timeseries data for a week of web site visits. The dataset contains the following columns:\n\n* `date` - The date the event occurred.\n* `user_id` - A 4-byte user ID.\n* `time_engaged_sec` - Time spent engaged during the event (e.g., time spent on a webpage).\n\nSome questions we might ask about this dataset are: How many daily events were considered low-engagement events for users? What proportion of events each day were users engaged? Here's the code to answer these questions, leveraging the summarization of logical vectors:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata_user_engagement |>\n  group_by(date) |>\n  summarise(\n    count_low_engagement = sum(time_engaged_sec <= 10, na.rm = TRUE),\n    proportion_engaged = mean(time_engaged_sec >= 30, na.rm = TRUE)\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 7 Ã— 3\n  date       count_low_engagement proportion_engaged\n  <date>                    <int>              <dbl>\n1 2024-12-02                    6               0.77\n2 2024-12-03                   10               0.74\n3 2024-12-04                    8               0.75\n4 2024-12-05                    7               0.75\n5 2024-12-06                    8               0.73\n6 2024-12-07                    8               0.78\n7 2024-12-08                    6               0.68\n```\n\n\n:::\n:::\n\n\n\n\nAt first glance, you might ask where are the logical vectors? They're created in the `sum()` and `mean()` functions when we use the `<=` and `>=` operators. That is, the statement `time_engaged_sec <= 10` initially creates the logical vector in the background, and then the `sum()` or `mean()` is computed on that logical vector.\n\nPretty neat, huh ?!\n\n# Wrap up\n\nThere are many other uses for logical vectors, but this was the most useful one I recently relearned. Check out [Chapter 12: Logical vectors](https://r4ds.hadley.nz/logicals) from the [R4DS book](https://r4ds.hadley.nz/) to learn more.\n\nOne more tool to add to the analysis tool box. Thanks for spending time learning with me.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}