---
title: "TIL: Calculating correlations with `corrr`"
date: "2023-10-22"
author: "Collin K. Berke, Ph.D."
draft: false 
image: thumbnail.jpg
description: "Use the corrr package to calculate and visualize correlations"
toc: true
categories:
  - til
  - data analysis
  - exploratory analysis
  - data visualization
---

```{r wrangle-data-from-package, include=FALSE, eval=FALSE}
# Data is wrangled from a personal package I created
vb_game_by_game <- data_vb_game_by_game |>
  filter(year(date) == 2023) |>
  drop_na(w_l) |>
  group_by(team_name) |>
  summarise(
    wins = sum(w_l == "win"),
    across(c(set_wins:total_attacks, assists:block_assists), sum),
    across(c(hit_pct, opp_hit_pct), mean)
  ) |>
  rename(avg_hit_pct = hit_pct, avg_opp_hit_pct = opp_hit_pct)

write_csv(
  vb_game_by_game,
  here(
    "til/posts/2023-10-22-correlations-with-corrr/2023_10_14_big10_vb_game_by_game.csv"
  )
)
```

![Photo by [Omar Flores](https://unsplash.com/photos/MOO6k3RaiwE)](thumbnail-wide.jpg)

Today I learned calculating, visualising, and exploring correlations is easy with the [`corrr package`](https://corrr.tidymodels.org/index.html).

In the past, I would rely on Base R's [`stats::cor()`](https://www.rdocumentation.org/packages/stats/versions/3.6.2/topics/cor) for exploring correlations. This function is a powerful tool if you're looking to do additional analysis beyond investigating correlation coefficients. `stats::cor()` has its [pain points](https://drsimonj.svbtle.com/exploring-correlations-in-r-with-corrr), though. Sometimes, I just want a package to explore correlations quickly and easily.   

I recently stumbled across the [corrr](https://corrr.tidymodels.org/index.html) package. It met all the needs I listed above. The purpose of this post is to highlight what I've learned while using this package, and to demonstrate functionality I've found useful. To get started, let's attach some libraries and import some example data.

```{r setup, message=FALSE}
library(tidyverse)
library(corrr)
library(here)
```

# The data

In this post, I explore correlations within [NCAA Big Ten Women's volleyball](https://bigten.org/sports/wvball) data. Living in Nebraska, you can't but not enjoy the stellar play of Husker volleyball[^1]; It's also a very big deal around here[^2]. So, I saw it fitting to explore this data and take this opportunity to learn more about the game. 

The data is aggregated match data from the 2021 season up to the middle of the 2023 season. Match data only includes Big Ten Conference teams. As of this writing, the data has been updated up to 2023-10-14.

[^1]: As I was finishing this post, the [Nebraska Women's Volleyball team](https://huskers.com/sports/volleyball) [beat #1 Wisconsin](https://bigten.org/boxscore.aspx?id=JcLFfL9RUu0H5ystoOMbjYgeW0QoC6K0726uwp87noWJWXu73Dn8TzTNTUhf17%2Fgd7i5ohZahns6d%2BruRwKgiVpITO5CN73jPmMstPwYhqft6f27jXQbUSRHbFwrkduosEgVmNZsiYvHbrEwAvjkPQ%3D%3D&path=wvball) in a five set thriller.

[^2]: The Nebraska Women's Volleyball team [broke the World Record for a women's sporting event](https://huskers.com/volleyballday) on 2023-08-30. Official attendance was 92,003.

Let's import this data. [`readr::read_csv()`](https://readr.tidyverse.org/reference/read_delim.html) imports the data used in this post.

```{r import-data}
data_vball <-
  read_csv(here(
    "blog/posts/2023-10-22-correlations-with-corrr/2023_10_14_big10_vb_game_by_game.csv"
  ))
```

We can view the variables within the data by running [`dplyr::glimpse()`](https://dplyr.tidyverse.org/reference/glimpse.html) on `data_vball`. 

```{r glimpse-data}
glimpse(data_vball)
```

The data contains two types of statistics: counts and calculated metrics (e.g., average hitting percentage). Variable names should be informative. However, if you're unfamilair with some of the terminology used within volleyball, here is a good [list](https://en.wikipedia.org/wiki/Volleyball_jargon).  

# Calculate correlations with `corrr::correlate()`

Obtaining a correlation table is easy with `corrr`. We just need to pipe our data to the [`correlate()`](https://corrr.tidymodels.org/reference/correlate.html) function.

```{r calc-correlations}
data_vball |> correlate()
```

Boom! Outputted is a correlation table of all our numeric variables within the dataset. `correlate()` was even smart enough to identify that `team_name` was of type character and excluded it for us.

`correlate()` even informs us what's happening under the hood: correlations were calculated using Pearson correlation and missing data (if we had any) were treated using the `pairwise.complete.obs` option. We can modify these options (e.g., use Spearman for correlation calculations) if needed. Check out the function's documentation for more informtion (run `?correlate` in your R console).

# Use tidyverse verbs on `correlate()`'s output 

`corrr` follows [tidy design principles](https://design.tidyverse.org/). One principle that is very useful is the `correlate()` function returns a standard object type, the [tibble](https://tibble.tidyverse.org/). Since a tibble is returned, [tidyverse](https://www.tidyverse.org/) verbs can be used to further explore the correlation table. For instance, say we wanted to arrange correlations from highest to lowest for one of the columns. Wins seems like a good candidate here. We can do this by passing `correlate()`'s output to [`dplyr::arrange()`](https://dplyr.tidyverse.org/reference/arrange.html).

```{r wrng-arrange-correlations}
data_vball |>
  correlate() |>
  arrange(desc(wins))
```

This looks good, but does it really make sense to include the correlation between `set_wins`, `set_loss`, `s` (i.e., sets) with other variables in our data? Not really, so `corrr` provides the [`focus()`](https://corrr.tidymodels.org/reference/focus.html) function to remove columns and rows. We'll also set the function's `mirror` argument to `TRUE`, which will remove these variables from both the rows and columns of the output.

Let's even go a bit further by using `focus()` to reduce the output down to only view variable correlations with wins. To do this, we use the following code.

```{r calc-wrang-correlation}
data_vball |>
  correlate() |>
  focus(-set_wins, -set_loss, -s, mirror = TRUE) |>
  focus(wins) |>
  arrange(desc(wins))
```

Now we got something to learn more about the game. A few things of note:

* It seems we have evidence that hitting percentage and opponent hitting percentage play a sizeable role when it comes to wins. Although I'm not making a causal argument here, it makes sense from what I know about the game. If a team is efficient at scoring while also making their opponent less efficient (i.e., having a strong defense), you'll be a pretty elite team in terms of wins. 

* Digs having a slight negative correlation is also surprising. One could argue that digs are important, especially in key situations. However, if your team is racking a significant amount each match, it might be an indication of deficienses in other areas of the defense (e.g., blocking).

* The lack of correlation for aces is also surprising. You'd think more aces would be positively correlated with wins. I can't come up with a reason why there's little correlation here. Maybe some more exploratory analysis would reveal why this is the case.

 There's some other results that might be worth further exploration. However, let's get back to `corrr`'s features, as that's the focus of this article.

# Use `corrr`'s formatting functions

Back to our larger correlation coefficient table, say we want to only print out one part of the table. That is, say we want to get rid of either the upper or lower triangle to reduce the amount of information contained within the table. We can use [`corrr::shave()`](https://corrr.tidymodels.org/reference/shave.html) alongside [`corrr::fashion()`](https://corrr.tidymodels.org/reference/fashion.html) to do this.

```{r wrng-shave-correlations}
data_vball |>
  correlate() |>
  focus(-set_wins, -set_loss, -s, mirror = TRUE) |>
  shave() |>
  fashion()
```

Now we have a correlation table that is pretty printed to the console with the upper triangle removed. You can remove the bottom triangle by setting `shave()`'s `upper` argument to `FALSE`. Although a table is great, sometimes a visualization conveys this information better.

# Visualize correlations with the `corrr` package

Since `correlate()` outputs a tibble, it's easy to create a visualization of values in the correlation table. We just have to pass the output to some [`ggplot2`](https://ggplot2.tidyverse.org/) code. Here we have a simple bar chart which arranges correlations with wins.   

```{r vis-corr-wins}
data_vball |>
  correlate() |>
  focus(-set_wins, -set_loss, -s, mirror = TRUE) |>
  focus(wins) |>
  mutate(term = reorder(term, wins)) |>
  ggplot(aes(term, wins)) +
  geom_col() +
  coord_flip() +
  theme_minimal()
```

`corrr` also provides the [`network_plot()`](https://corrr.tidymodels.org/reference/network_plot.html) plotting function, which provides an alternative way to visualize correlations. The function creates a network graph, where nodes represent variables, and the lightness and darkness of the colors represents the strength of the correlation between variables. To simplify the plot, the `min_cor` argument can be set to limit the minimum strength a correlation must be before it is included within the network plot. This is useful when you have many variables in a dataset that lack any correlation with one another, and you only want to visualize ones with the greatest positive and negative correlations.

```{r vis-network-wins-corr}
data_vball |>
  correlate() |>
  focus(-set_wins, -set_loss, -s, mirror = TRUE) |>
  network_plot(min_cor = 0.3)
```

# Wrap-up

In this post, I highlighted what I recently learned while using the [`corrr` package](https://corrr.tidymodels.org/index.html). To do this, I explored correlations within some [NCAA Big Ten Women's volleyball](https://bigten.org/sports/wvball) data. `corrr` makes it easy to explore correlations via the [`correlate()`](https://corrr.tidymodels.org/reference/correlate.html) function. Since `corrr` follows [tidy design principles](https://design.tidyverse.org/), its output of a [tibble](https://tibble.tidyverse.org/) can be piped to other [tidyverse package](https://www.tidyverse.org/) verbs to easily explore various correlations within our data. Finally, I covered how the output can be passed to [`ggplot2`](https://ggplot2.tidyverse.org/) plotting functions to visualize correlations. I then highlighted `corrr`'s built in [`network_plot()`](https://corrr.tidymodels.org/reference/network_plot.html) function as another tool to visualize correlations.

Have fun exploring your data with `corrr`!

# Resources to learn more

* [Exploring correlations in R with corrr](https://drsimonj.svbtle.com/exploring-correlations-in-r-with-corrr) 


